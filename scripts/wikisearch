#!/usr/bin/python3
#
# Copyright (c) 2021 Jeff Doozan
#
# This is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

import bz2
from collections import defaultdict
import re
import os
from enwiktionary_wordlist.utils import wiki_to_text
from enwiktionary_wordlist.wikiextract import WikiExtractWithRev
from enwiktionary_parser.languages.all_ids import languages as lang_ids

from autodooz.wikimatch import get_matches, format_matches
from pywikibot import xmlreader


def iter_articles(filename):
    if ".txt.bz2" in filename:
        return WikiExtractWithRev.iter_articles_from_bz2(filename)
    if ".xml.bz2" in filename:
        dump = xmlreader.XmlDump(filename)
        return dump.parse()

def main():

    import argparse

    parser = argparse.ArgumentParser(description="Search language extract for articles matching a given pattern")
    parser.add_argument("filename", help="Search the given file")
    parser.add_argument("pattern", help="regex pattern")
    parser.add_argument("--not", help="not matching regex pattern", dest="re_not")

    parser.add_argument("--dotall", help="use re.DOTALL when searching")
    parser.add_argument("--path-filter", help="Search only inside pages/sections('page:section:subsection:...') that match the given regex")

    parser.add_argument("--sort", help="sort results", action="store_true")

    parser.add_argument("--nopath", help="Don't print path information", action="store_true")
    parser.add_argument("--full", help="Use full output", action="store_true")
    parser.add_argument("--section", help="Print entire section if it has matches", action="store_true")
    parser.add_argument("--no-children", help="Don't print child sections of matching sections", action="store_true")
    parser.add_argument("--expand-matches", help="Print duplicate items individually", action="store_true")

#    parser.add_argument("--in-template", help="search only within templates matching TEMPLATE pattern")
#    parser.add_argument("--or", help="not matching regex pattern")
#    parser.add_argument("--and", help="not matching regex pattern")
#    parser.add_argument("wordlist2", help="wordlist")
    args = parser.parse_args()

    if args.section:
        args.full = True

    if not os.path.exists(args.filename):
        print(f"File not found: {args.filename}")
        exit(1)

    re_not = re.compile(args.re_not) if args.re_not else None
    re_match = args.pattern

    all_matches = {}

    for article in iter_articles(args.filename):
        if ":" in article.title:
            continue

        match_context = "section" if args.section else "line"
        matches = get_matches(
                article.title,
                article.text,
                re_match,
                re_not,
                match_context,
                args.nopath,
                path_filter=args.path_filter,
                no_children=args.no_children)
        if not matches:
            continue

        full_matches = []
        for path, section_target, match_target, start, end in matches:
            match_text = article.text[start:end]
            full_matches.append((path, section_target, match_text))

        entries = format_matches(matches, article.text, args.nopath,
                    expand_matches=args.expand_matches,
                    compact=not args.full, revision=article.revisionid)

        if not entries:
            continue

        if args.sort:
            all_matches[article.title] = entries
        else:
            print("\n".join(entries))

    if args.sort:
        for page, entries in sorted(all_matches.items(), key=lambda x: x[0]):
            print("\n".join(entries))

if __name__ == "__main__":
    main()

